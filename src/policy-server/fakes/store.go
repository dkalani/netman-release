// This file was generated by counterfeiter
package fakes

import (
	"policy-server/models"
	"sync"

	"github.com/pivotal-golang/lager"
)

type Store struct {
	AddStub        func(logger lager.Logger, rule models.Rule) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		logger lager.Logger
		rule   models.Rule
	}
	addReturns struct {
		result1 error
	}
	DeleteStub        func(logger lager.Logger, rule models.Rule) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		logger lager.Logger
		rule   models.Rule
	}
	deleteReturns struct {
		result1 error
	}
	ListStub        func(logger lager.Logger) ([]models.Rule, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		logger lager.Logger
	}
	listReturns struct {
		result1 []models.Rule
		result2 error
	}
	GetWhitelistsStub        func(logger lager.Logger, groups []string) ([]models.IngressWhitelist, error)
	getWhitelistsMutex       sync.RWMutex
	getWhitelistsArgsForCall []struct {
		logger lager.Logger
		groups []string
	}
	getWhitelistsReturns struct {
		result1 []models.IngressWhitelist
		result2 error
	}
	invocations map[string][][]interface{}
}

func (fake *Store) Add(logger lager.Logger, rule models.Rule) error {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		logger lager.Logger
		rule   models.Rule
	}{logger, rule})
	fake.guard("Add")
	fake.invocations["Add"] = append(fake.invocations["Add"], []interface{}{logger, rule})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(logger, rule)
	} else {
		return fake.addReturns.result1
	}
}

func (fake *Store) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *Store) AddArgsForCall(i int) (lager.Logger, models.Rule) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].logger, fake.addArgsForCall[i].rule
}

func (fake *Store) AddReturns(result1 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *Store) Delete(logger lager.Logger, rule models.Rule) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		logger lager.Logger
		rule   models.Rule
	}{logger, rule})
	fake.guard("Delete")
	fake.invocations["Delete"] = append(fake.invocations["Delete"], []interface{}{logger, rule})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(logger, rule)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *Store) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *Store) DeleteArgsForCall(i int) (lager.Logger, models.Rule) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].logger, fake.deleteArgsForCall[i].rule
}

func (fake *Store) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *Store) List(logger lager.Logger) ([]models.Rule, error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.guard("List")
	fake.invocations["List"] = append(fake.invocations["List"], []interface{}{logger})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(logger)
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *Store) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *Store) ListArgsForCall(i int) lager.Logger {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].logger
}

func (fake *Store) ListReturns(result1 []models.Rule, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []models.Rule
		result2 error
	}{result1, result2}
}

func (fake *Store) GetWhitelists(logger lager.Logger, groups []string) ([]models.IngressWhitelist, error) {
	var groupsCopy []string
	if groups != nil {
		groupsCopy = make([]string, len(groups))
		copy(groupsCopy, groups)
	}
	fake.getWhitelistsMutex.Lock()
	fake.getWhitelistsArgsForCall = append(fake.getWhitelistsArgsForCall, struct {
		logger lager.Logger
		groups []string
	}{logger, groupsCopy})
	fake.guard("GetWhitelists")
	fake.invocations["GetWhitelists"] = append(fake.invocations["GetWhitelists"], []interface{}{logger, groupsCopy})
	fake.getWhitelistsMutex.Unlock()
	if fake.GetWhitelistsStub != nil {
		return fake.GetWhitelistsStub(logger, groups)
	} else {
		return fake.getWhitelistsReturns.result1, fake.getWhitelistsReturns.result2
	}
}

func (fake *Store) GetWhitelistsCallCount() int {
	fake.getWhitelistsMutex.RLock()
	defer fake.getWhitelistsMutex.RUnlock()
	return len(fake.getWhitelistsArgsForCall)
}

func (fake *Store) GetWhitelistsArgsForCall(i int) (lager.Logger, []string) {
	fake.getWhitelistsMutex.RLock()
	defer fake.getWhitelistsMutex.RUnlock()
	return fake.getWhitelistsArgsForCall[i].logger, fake.getWhitelistsArgsForCall[i].groups
}

func (fake *Store) GetWhitelistsReturns(result1 []models.IngressWhitelist, result2 error) {
	fake.GetWhitelistsStub = nil
	fake.getWhitelistsReturns = struct {
		result1 []models.IngressWhitelist
		result2 error
	}{result1, result2}
}

func (fake *Store) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *Store) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}
